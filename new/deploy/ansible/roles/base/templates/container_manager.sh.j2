#!/bin/bash

# OSINT Container Manager
# Manages the lifecycle of OSINT tool containers

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
CONTAINER_DIR="/opt/osint/containers"
DATA_DIR="/opt/osint/data"
NETWORK="osint-bridge"

# Check if running as root
if [ "$EUID" -ne 0 ]; then
  echo -e "${RED}Please run as root${NC}"
  exit 1
fi

# Function to list all containers
list_containers() {
    echo -e "${BLUE}OSINT Tool Containers:${NC}"
    echo -e "${YELLOW}------------------------------${NC}"
    
    # Get running containers
    local running=$(nerdctl ps --format "{{.Names}}")
    
    # Get all containers
    local all=$(nerdctl ps -a --format "{{.Names}}" | grep "osint-")
    
    # Get available container images
    local images=$(nerdctl images --format "{{.Repository}}:{{.Tag}}" | grep "osint-")
    
    # Display running containers
    echo -e "${GREEN}Running Containers:${NC}"
    if [ -z "$running" ]; then
        echo "  No containers running"
    else
        echo "$running" | grep "osint-" | sed 's/^/  /'
    fi
    
    echo
    
    # Display all containers
    echo -e "${GREEN}All Containers:${NC}"
    if [ -z "$all" ]; then
        echo "  No containers found"
    else
        echo "$all" | sed 's/^/  /'
    fi
    
    echo
    
    # Display available images
    echo -e "${GREEN}Available Images:${NC}"
    if [ -z "$images" ]; then
        echo "  No images found"
    else
        echo "$images" | sed 's/^/  /'
    fi
}

# Function to build all containers
build_all() {
    echo -e "${BLUE}Building all OSINT containers...${NC}"
    
    # Build base container first
    echo -e "${YELLOW}Building base container...${NC}"
    nerdctl build -t osint-base:latest $CONTAINER_DIR/base
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}Failed to build base container${NC}"
        return 1
    fi
    
    # Build tool containers
    for dir in $CONTAINER_DIR/*/; do
        # Skip base container
        if [ "$(basename "$dir")" == "base" ]; then
            continue
        fi
        
        local container_name="osint-$(basename "$dir")"
        echo -e "${YELLOW}Building $container_name...${NC}"
        nerdctl build -t $container_name:latest "$dir"
        
        if [ $? -ne 0 ]; then
            echo -e "${RED}Failed to build $container_name${NC}"
        else
            echo -e "${GREEN}Successfully built $container_name${NC}"
        fi
    done
    
    echo -e "${GREEN}Container build process completed${NC}"
}

# Function to start all containers
start_all() {
    echo -e "${BLUE}Starting OSINT tool containers...${NC}"
    
    # Get list of available images
    local images=$(nerdctl images --format "{{.Repository}}" | grep "osint-" | grep -v "osint-base")
    
    if [ -z "$images" ]; then
        echo -e "${RED}No OSINT tool images found. Run 'build' first.${NC}"
        return 1
    fi
    
    # Stop any running containers first
    stop_all
    
    # Create a user-defined bridge network if it doesn't exist
    if ! nerdctl network ls | grep -q "$NETWORK"; then
        echo -e "${YELLOW}Creating container network $NETWORK...${NC}"
        nerdctl network create $NETWORK
    fi
    
    # Start each container
    for image in $images; do
        local container_name=$(echo "$image" | sed 's/:latest//')
        
        echo -e "${YELLOW}Starting $container_name...${NC}"
        nerdctl run -d --name $container_name \
            --network $NETWORK \
            -v $DATA_DIR:/opt/osint/data \
            $image sleep infinity
        
        if [ $? -ne 0 ]; then
            echo -e "${RED}Failed to start $container_name${NC}"
        else
            echo -e "${GREEN}Successfully started $container_name${NC}"
        fi
    done
    
    echo -e "${GREEN}All containers started${NC}"
}

# Function to stop all containers
stop_all() {
    echo -e "${BLUE}Stopping OSINT tool containers...${NC}"
    
    # Get list of running containers
    local containers=$(nerdctl ps --format "{{.Names}}" | grep "osint-")
    
    if [ -z "$containers" ]; then
        echo -e "${YELLOW}No running containers to stop${NC}"
        return 0
    fi
    
    # Stop each container
    for container in $containers; do
        echo -e "${YELLOW}Stopping $container...${NC}"
        nerdctl stop $container
        
        if [ $? -ne 0 ]; then
            echo -e "${RED}Failed to stop $container${NC}"
        else
            echo -e "${GREEN}Successfully stopped $container${NC}"
        fi
    done
    
    # Remove stopped containers
    echo -e "${YELLOW}Removing stopped containers...${NC}"
    nerdctl rm $(nerdctl ps -a --format "{{.Names}}" | grep "osint-") 2>/dev/null || true
    
    echo -e "${GREEN}All containers stopped and removed${NC}"
}

# Function to restart containers
restart_all() {
    echo -e "${BLUE}Restarting OSINT tool containers...${NC}"
    stop_all
    start_all
}

# Function to update all containers
update_all() {
    echo -e "${BLUE}Updating OSINT tool containers...${NC}"
    
    # Build new containers
    build_all
    
    # Restart with new containers
    restart_all
}

# Function to execute command in a container
exec_container() {
    local container=$1
    shift
    local command="$@"
    
    if [ -z "$container" ]; then
        echo -e "${RED}Error: Container name required${NC}"
        echo -e "Usage: $0 exec CONTAINER [COMMAND]"
        return 1
    fi
    
    if [ -z "$command" ]; then
        command="/bin/bash"
    fi
    
    # Check if container exists
    if ! nerdctl ps -a | grep -q "$container"; then
        echo -e "${RED}Error: Container $container not found${NC}"
        return 1
    fi
    
    # Check if container is running
    if ! nerdctl ps | grep -q "$container"; then
        echo -e "${YELLOW}Container $container is not running. Starting it...${NC}"
        nerdctl start "$container"
    fi
    
    # Execute command
    echo -e "${YELLOW}Executing command in $container...${NC}"
    nerdctl exec -it "$container" $command
}

# Function to show usage
show_usage() {
    echo -e "${BLUE}OSINT Container Manager${NC}"
    echo -e "${YELLOW}==================================${NC}"
    echo -e "This script manages the lifecycle of OSINT tool containers."
    echo
    echo -e "${BLUE}Usage:${NC}"
    echo -e "  ${YELLOW}list${NC}               - List all containers"
    echo -e "  ${YELLOW}build${NC}              - Build all containers"
    echo -e "  ${YELLOW}start${NC}              - Start all containers"
    echo -e "  ${YELLOW}stop${NC}               - Stop all containers"
    echo -e "  ${YELLOW}restart${NC}            - Restart all containers"
    echo -e "  ${YELLOW}update${NC}             - Update and rebuild all containers"
    echo -e "  ${YELLOW}exec${NC} CONTAINER CMD - Execute command in container"
    echo -e "  ${YELLOW}help${NC}               - Show this help message"
    echo
}

# Main function
main() {
    case "$1" in
        list)
            list_containers
            ;;
        build)
            build_all
            ;;
        start)
            start_all
            ;;
        stop)
            stop_all
            ;;
        restart)
            restart_all
            ;;
        update)
            update_all
            ;;
        exec)
            shift
            exec_container "$@"
            ;;
        help|--help|-h)
            show_usage
            ;;
        *)
            show_usage
            exit 1
            ;;
    esac
}

# Run main with all arguments
main "$@"