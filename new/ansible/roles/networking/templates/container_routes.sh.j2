#!/bin/bash

# Container network traffic routing script
# Routes traffic from containers through different network interfaces

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
CONTAINER_SUBNET="172.20.0.0/16"
CONTAINER_BRIDGE="osint0"

# Check if running as root
if [ "$EUID" -ne 0 ]; then
  echo -e "${RED}Please run as root${NC}"
  exit 1
fi

# Function to list available network interfaces
list_interfaces() {
    echo -e "${BLUE}Available network interfaces:${NC}"
    echo -e "${YELLOW}------------------------------${NC}"
    
    # Get list of interfaces excluding loopback and container interfaces
    interfaces=$(ip -o link show | grep -v -E "lo:|osint0:|docker0:|cni0:" | awk -F': ' '{print $2}')
    
    # Print interface details
    for iface in $interfaces; do
        # Get IP address
        ip_addr=$(ip -o -4 addr show dev $iface 2>/dev/null | awk '{print $4}' | cut -d/ -f1)
        if [ -z "$ip_addr" ]; then
            ip_addr="No IPv4 address"
        fi
        
        # Get interface status
        state=$(cat /sys/class/net/$iface/operstate 2>/dev/null || echo "unknown")
        
        # Check if it's a USB device (potentially a phone)
        if [[ $iface == usb* ]] || [[ $iface == enp0s*u* ]]; then
            device_type="${BLUE}[USB/Mobile]${NC}"
        elif [[ $iface == wl* ]]; then
            device_type="${BLUE}[Wireless]${NC}"
        elif [[ $iface == tun* ]] || [[ $iface == wg* ]]; then
            device_type="${BLUE}[VPN]${NC}"
        else
            device_type="${BLUE}[Wired]${NC}"
        fi
        
        # Check if it's the default route
        is_default=$(ip route | grep "default" | grep $iface || echo "")
        if [ -n "$is_default" ]; then
            default_mark="${GREEN}*DEFAULT*${NC}"
        else
            default_mark=""
        fi
        
        # Print interface info
        echo -e "${GREEN}$iface${NC} $device_type $default_mark"
        echo -e "  IP address: ${YELLOW}$ip_addr${NC}"
        echo -e "  State: ${YELLOW}$state${NC}"
        echo
    done
}

# Function to display current routing information
display_routing() {
    echo -e "${BLUE}Current routing configuration:${NC}"
    echo -e "${YELLOW}------------------------------${NC}"
    
    # Display container bridge information
    echo -e "${BLUE}Container bridge:${NC}"
    ip -4 addr show dev $CONTAINER_BRIDGE 2>/dev/null || echo "Container bridge not found"
    echo
    
    # Display default route
    echo -e "${BLUE}Default route:${NC}"
    ip route | grep "default"
    echo
    
    # Display NAT rules
    echo -e "${BLUE}NAT rules:${NC}"
    iptables -t nat -L POSTROUTING -n -v | grep $CONTAINER_SUBNET || echo "No NAT rules for container subnet"
    echo
}

# Function to check if interface exists
check_interface() {
    if ! ip link show dev "$1" &>/dev/null; then
        echo -e "${RED}Error: Interface $1 does not exist${NC}"
        return 1
    fi
    return 0
}

# Function to check if interface has an IPv4 address
check_interface_ip() {
    if ! ip -o -4 addr show dev "$1" | grep -q "inet"; then
        echo -e "${RED}Error: Interface $1 has no IPv4 address${NC}"
        return 1
    fi
    return 0
}

# Function to route container traffic through specified interface
route_traffic() {
    local interface=$1
    
    # Check if interface exists and has IP
    check_interface "$interface" || return 1
    check_interface_ip "$interface" || return 1
    
    # Get interface gateway
    local gateway=$(ip route | grep "default.*$interface" | awk '{print $3}')
    
    # If no gateway found, try to determine it
    if [ -z "$gateway" ]; then
        # Use first address in subnet as gateway (might not always work)
        local ip_addr=$(ip -o -4 addr show dev "$interface" | awk '{print $4}')
        gateway=$(echo "$ip_addr" | sed -E 's/([0-9]+\.[0-9]+\.[0-9]+\.)[0-9]+.*/\11/')
        echo -e "${YELLOW}Warning: No default gateway found for $interface. Using $gateway${NC}"
    fi
    
    echo -e "${YELLOW}Setting up container routing through $interface...${NC}"
    
    # Clear existing NAT rules
    iptables -t nat -F POSTROUTING
    
    # Add NAT rule for container subnet through the specified interface
    iptables -t nat -A POSTROUTING -s $CONTAINER_SUBNET -o $interface -j MASQUERADE
    
    # Make sure container bridge is up
    ip link set dev $CONTAINER_BRIDGE up
    
    # Save iptables rules
    netfilter-persistent save
    
    echo -e "${GREEN}Container traffic now routed through $interface${NC}"
    display_routing
}

# Function to reset container routing to default
reset_routing() {
    echo -e "${YELLOW}Resetting container routing to default...${NC}"
    
    # Find default interface
    local default_iface=$(ip route | grep "default" | awk '{print $5}' | head -1)
    
    if [ -z "$default_iface" ]; then
        echo -e "${RED}Error: No default interface found${NC}"
        return 1
    fi
    
    # Route through default interface
    route_traffic $default_iface
    
    echo -e "${GREEN}Container routing reset to default interface: $default_iface${NC}"
}

# Function to route through a USB tethered phone
route_through_phone() {
    echo -e "${YELLOW}Looking for USB tethered phone interfaces...${NC}"
    
    # Find USB network interfaces
    local usb_ifaces=$(ip -o link show | grep -E "usb|enp0s.*u" | awk -F': ' '{print $2}')
    
    if [ -z "$usb_ifaces" ]; then
        echo -e "${RED}Error: No USB network interfaces found${NC}"
        echo -e "${YELLOW}Please connect your phone via USB and enable tethering${NC}"
        return 1
    fi
    
    echo -e "${GREEN}Found USB interfaces: $usb_ifaces${NC}"
    
    # Handle multiple interfaces
    if [ $(echo "$usb_ifaces" | wc -w) -gt 1 ]; then
        echo -e "${YELLOW}Multiple USB interfaces found. Please select one:${NC}"
        select iface in $usb_ifaces; do
            if [ -n "$iface" ]; then
                usb_iface=$iface
                break
            fi
        done
    else
        usb_iface=$usb_ifaces
    fi
    
    # Check if interface has an IP
    if ! ip -o -4 addr show dev "$usb_iface" | grep -q "inet"; then
        echo -e "${YELLOW}Interface $usb_iface has no IP address. Attempting to get one via DHCP...${NC}"
        dhclient "$usb_iface"
        
        # Check again
        if ! ip -o -4 addr show dev "$usb_iface" | grep -q "inet"; then
            echo -e "${RED}Failed to get IP address for $usb_iface${NC}"
            return 1
        fi
    fi
    
    # Route traffic through the phone
    route_traffic "$usb_iface"
}

# Function to show usage help
show_help() {
    echo -e "${BLUE}Container Network Traffic Routing${NC}"
    echo -e "${YELLOW}==================================${NC}"
    echo -e "This script allows you to route container traffic through different network interfaces."
    echo
    echo -e "${BLUE}Usage:${NC}"
    echo -e "  ${YELLOW}list${NC}             - List available network interfaces"
    echo -e "  ${YELLOW}status${NC}           - Show current routing configuration"
    echo -e "  ${YELLOW}route${NC} INTERFACE  - Route container traffic through INTERFACE"
    echo -e "  ${YELLOW}phone${NC}            - Route container traffic through USB tethered phone"
    echo -e "  ${YELLOW}reset${NC}            - Reset routing to default interface"
    echo -e "  ${YELLOW}help${NC}             - Show this help message"
    echo
    echo -e "${BLUE}Example:${NC}"
    echo -e "  ${YELLOW}$0 route eth0${NC}    - Route container traffic through eth0"
    echo -e "  ${YELLOW}$0 phone${NC}         - Route container traffic through tethered phone"
    echo
}

# Main function
main() {
    case "$1" in
        list)
            list_interfaces
            ;;
        status)
            display_routing
            ;;
        route)
            if [ -z "$2" ]; then
                echo -e "${RED}Error: Interface name required${NC}"
                echo -e "Usage: $0 route INTERFACE"
                exit 1
            fi
            route_traffic "$2"
            ;;
        phone)
            route_through_phone
            ;;
        reset)
            reset_routing
            ;;
        help)
            show_help
            ;;
        *)
            show_help
            exit 1
            ;;
    esac
}

# Call main function with all arguments
main "$@"