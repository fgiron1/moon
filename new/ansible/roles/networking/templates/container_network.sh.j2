#!/bin/bash

# Script to set up network integration between containerd and host
# Enables routing for containers through specified network interfaces

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to enable IP forwarding
enable_ip_forwarding() {
    echo -e "${YELLOW}Enabling IP forwarding...${NC}"
    echo 1 > /proc/sys/net/ipv4/ip_forward
    
    # Make permanent
    if ! grep -q "net.ipv4.ip_forward = 1" /etc/sysctl.conf; then
        echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
        sysctl -p
    fi
    
    echo -e "${GREEN}IP forwarding enabled${NC}"
}

# Function to set up NAT for containers
setup_container_nat() {
    local interface=$1
    
    echo -e "${YELLOW}Setting up NAT for containers through interface $interface...${NC}"
    
    # Clear existing rules
    iptables -t nat -F POSTROUTING
    
    # Add NAT rule
    iptables -t nat -A POSTROUTING -s 172.20.0.0/16 -o $interface -j MASQUERADE
    
    # Save rules
    netfilter-persistent save
    
    echo -e "${GREEN}NAT for containers through $interface set up successfully${NC}"
}

# Function to list all available interfaces
list_interfaces() {
    echo -e "${YELLOW}Available network interfaces:${NC}"
    ip -o link show | grep -v "lo:" | awk -F': ' '{print $2}'
    echo ""
}

# Function to get container networks
get_container_networks() {
    echo -e "${YELLOW}Container networks:${NC}"
    ip -o addr show dev osint0 2>/dev/null || echo "Container bridge not found"
    echo ""
}

# Create container bridge if needed
create_container_bridge() {
    if ! ip link show osint0 &>/dev/null; then
        echo -e "${YELLOW}Creating container bridge network...${NC}"
        
        # Create CNI directory
        mkdir -p /etc/cni/net.d
        
        # Write CNI config
        cat > /etc/cni/net.d/10-osint-bridge.conf << EOF
{
  "cniVersion": "0.4.0",
  "name": "osint-bridge",
  "type": "bridge",
  "bridge": "osint0",
  "isGateway": true,
  "ipMasq": true,
  "ipam": {
    "type": "host-local",
    "ranges": [
      [{
        "subnet": "172.20.0.0/16",
        "gateway": "172.20.0.1"
      }]
    ],
    "routes": [
      { "dst": "0.0.0.0/0" }
    ]
  }
}
EOF
        echo -e "${GREEN}Container bridge network created${NC}"
    else
        echo -e "${GREEN}Container bridge network already exists${NC}"
    fi
}

# Main function
main() {
    case "$1" in
        setup)
            if [ -z "$2" ]; then
                echo -e "${RED}Error: Interface name required${NC}"
                echo -e "Usage: $0 setup <interface>"
                exit 1
            fi
            
            # Verify interface exists
            if ! ip link show "$2" &>/dev/null; then
                echo -e "${RED}Error: Interface $2 does not exist${NC}"
                list_interfaces
                exit 1
            fi
            
            enable_ip_forwarding
            create_container_bridge
            setup_container_nat "$2"
            ;;
        
        status)
            echo -e "${YELLOW}Network Configuration Status:${NC}"
            echo -e "IP Forwarding: $(cat /proc/sys/net/ipv4/ip_forward)"
            echo -e "NAT Rules for Containers:"
            iptables -t nat -L POSTROUTING -v -n | grep MASQUERADE
            echo ""
            get_container_networks
            ;;
        
        list)
            list_interfaces
            ;;
        
        *)
            echo -e "Usage: $0 {setup <interface>|status|list}"
            echo -e "  ${YELLOW}setup <interface>${NC} - Set up container routing through interface"
            echo -e "  ${YELLOW}status${NC}           - Show current network configuration"
            echo -e "  ${YELLOW}list${NC}             - List available network interfaces"
            ;;
    esac
}

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}Please run as root${NC}"
    exit 1
fi

main "$@"