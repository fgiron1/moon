#!/bin/bash

# OSINT Data Integration Script
# Integrates data between containers and the host

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DATA_DIR="/opt/osint/data"
CONTAINER_DATA_DIR="/opt/osint/data"
STANDARDIZED_DIR="$DATA_DIR/standardized"
NEO4J_IMPORT_DIR="$DATA_DIR/neo4j/import"

# Check if running as root
if [ "$EUID" -ne 0 ]; then
  echo -e "${RED}Please run as root${NC}"
  exit 1
fi

# Function to display usage
usage() {
    echo -e "${BLUE}OSINT Data Integration${NC}"
    echo -e "${YELLOW}==================================${NC}"
    echo -e "This script helps integrate data between containers and the host system."
    echo
    echo -e "${BLUE}Usage:${NC}"
    echo -e "  ${YELLOW}process${NC} TARGET      - Process data for the specified target"
    echo -e "  ${YELLOW}import${NC} TARGET       - Import standardized data into Neo4j"
    echo -e "  ${YELLOW}export${NC} TARGET TYPE  - Export data (types: json, csv, neo4j)"
    echo -e "  ${YELLOW}help${NC}                - Show this help message"
    echo
    echo -e "${BLUE}Examples:${NC}"
    echo -e "  ${YELLOW}$0 process example.com${NC}    - Process all data for example.com"
    echo -e "  ${YELLOW}$0 import example.com${NC}     - Import example.com data into Neo4j"
    echo -e "  ${YELLOW}$0 export example.com json${NC} - Export example.com data to JSON"
    echo
}

# Function to process data for a target
process_target() {
    local target="$1"
    
    if [ -z "$target" ]; then
        echo -e "${RED}Error: Target name is required${NC}"
        return 1
    fi
    
    echo -e "${BLUE}Processing data for target: ${target}${NC}"
    
    # Check if target directory exists
    local target_dir="$DATA_DIR/targets/$target"
    if [ ! -d "$target_dir" ]; then
        echo -e "${RED}Error: Target directory not found: $target_dir${NC}"
        return 1
    fi
    
    # Run importer in the Python container
    echo -e "${YELLOW}Running data importer...${NC}"
    nerdctl exec osint-data-storage python3 /opt/osint/tools/data_correlation/python/importer.py -t "$target"
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}Error: Failed to process data${NC}"
        return 1
    fi
    
    echo -e "${GREEN}Data processing completed${NC}"
    
    # Check if standardized data was created
    local std_file="$STANDARDIZED_DIR/$target/${target}_standardized.json"
    if [ -f "$std_file" ]; then
        echo -e "${GREEN}Standardized data created: $std_file${NC}"
        
        # Ask to import into Neo4j
        read -p "Would you like to import this data into Neo4j? (y/N): " import_neo4j
        if [[ "$import_neo4j" == "y" || "$import_neo4j" == "Y" ]]; then
            import_neo4j "$target"
        fi
    else
        echo -e "${YELLOW}No standardized data was created${NC}"
    fi
    
    return 0
}

# Function to import data into Neo4j
import_neo4j() {
    local target="$1"
    
    if [ -z "$target" ]; then
        echo -e "${RED}Error: Target name is required${NC}"
        return 1
    fi
    
    echo -e "${BLUE}Importing data for target: ${target} into Neo4j${NC}"
    
    # Check if standardized data exists
    local std_file="$STANDARDIZED_DIR/$target/${target}_standardized.json"
    if [ ! -f "$std_file" ]; then
        echo -e "${RED}Error: Standardized data not found: $std_file${NC}"
        return 1
    fi
    
    # Copy to Neo4j import directory
    echo -e "${YELLOW}Copying data to Neo4j import directory...${NC}"
    cp "$std_file" "$NEO4J_IMPORT_DIR/"
    
    # Run correlator in the Python container
    echo -e "${YELLOW}Running data correlator...${NC}"
    nerdctl exec osint-data-storage python3 /opt/osint/tools/data_correlation/python/correlator.py -t "$target"
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}Error: Failed to import data into Neo4j${NC}"
        return 1
    fi
    
    echo -e "${GREEN}Data imported successfully${NC}"
    
    # Ask to generate visualization
    read -p "Would you like to generate a graph visualization? (y/N): " gen_viz
    if [[ "$gen_viz" == "y" || "$gen_viz" == "Y" ]]; then
        echo -e "${YELLOW}Generating visualization...${NC}"
        nerdctl exec osint-data-storage python3 /opt/osint/tools/data_correlation/python/correlator.py -t "$target" -v
        
        echo -e "${GREEN}Visualization generated${NC}"
        echo -e "${YELLOW}Check the reports directory for the visualization file${NC}"
    fi
    
    # Ask to generate report
    read -p "Would you like to generate a report? (y/N): " gen_report
    if [[ "$gen_report" == "y" || "$gen_report" == "Y" ]]; then
        echo -e "${YELLOW}Generating report...${NC}"
        nerdctl exec osint-data-storage python3 /opt/osint/tools/data_correlation/python/correlator.py -t "$target" -r
        
        echo -e "${GREEN}Report generated${NC}"
        echo -e "${YELLOW}Check the reports directory for the report file${NC}"
    fi
    
    return 0
}

# Function to export data
export_data() {
    local target="$1"
    local export_type="$2"
    
    if [ -z "$target" ] || [ -z "$export_type" ]; then
        echo -e "${RED}Error: Target name and export type are required${NC}"
        return 1
    fi
    
    echo -e "${BLUE}Exporting ${export_type} data for target: ${target}${NC}"
    
    # Create export directory
    local export_dir="$DATA_DIR/exports/$target"
    mkdir -p "$export_dir"
    
    # Export based on type
    case "$export_type" in
        json)
            # Export JSON data
            echo -e "${YELLOW}Exporting JSON data...${NC}"
            local std_file="$STANDARDIZED_DIR/$target/${target}_standardized.json"
            if [ -f "$std_file" ]; then
                local timestamp=$(date +%Y%m%d_%H%M%S)
                local export_file="$export_dir/${target}_export_${timestamp}.json"
                cp "$std_file" "$export_file"
                echo -e "${GREEN}JSON data exported to: $export_file${NC}"
            else
                echo -e "${RED}Error: Standardized data not found: $std_file${NC}"
                return 1
            fi
            ;;
        
        csv)
            # Export CSV data
            echo -e "${YELLOW}Exporting CSV data...${NC}"
            local timestamp=$(date +%Y%m%d_%H%M%S)
            local export_file="$export_dir/${target}_export_${timestamp}.csv"
            
            # Use Python to convert JSON to CSV
            nerdctl exec osint-data-storage python3 -c "
import json
import csv
import os

try:
    # Load JSON data
    with open('/opt/osint/data/standardized/${target}/${target}_standardized.json', 'r') as f:
        data = json.load(f)
    
    # Export entities to CSV
    with open('/opt/osint/data/exports/${target}/${target}_export_${timestamp}.csv', 'w', newline='') as f:
        writer = csv.writer(f)
        # Write header
        writer.writerow(['Type', 'Value', 'Confidence', 'Source'])
        # Write data
        for entity in data.get('entities', []):
            writer.writerow([
                entity.get('type', ''),
                entity.get('value', ''),
                entity.get('confidence', ''),
                ', '.join(entity.get('sources', [entity.get('source', '')]))
            ])
    
    print('CSV export completed')
except Exception as e:
    print(f'Error exporting CSV: {e}')
"
            
            if [ -f "$export_file" ]; then
                echo -e "${GREEN}CSV data exported to: $export_file${NC}"
            else
                echo -e "${RED}Error: Failed to export CSV data${NC}"
                return 1
            fi
            ;;
        
        neo4j)
            # Export Neo4j database dump
            echo -e "${YELLOW}Exporting Neo4j database dump...${NC}"
            local timestamp=$(date +%Y%m%d_%H%M%S)
            local export_file="$export_dir/${target}_neo4j_${timestamp}.dump"
            
            # Use Neo4j container to create dump
            nerdctl exec osint-data-storage bash -c "
            cd /var/lib/neo4j
            neo4j-admin dump --database=neo4j --to=/opt/osint/data/exports/${target}/${target}_neo4j_${timestamp}.dump
            "
            
            if [ -f "$export_file" ]; then
                echo -e "${GREEN}Neo4j database dump exported to: $export_file${NC}"
            else
                echo -e "${RED}Error: Failed to export Neo4j database dump${NC}"
                return 1
            fi
            ;;
        
        *)
            echo -e "${RED}Error: Unsupported export type: $export_type${NC}"
            echo -e "${YELLOW}Supported types: json, csv, neo4j${NC}"
            return 1
            ;;
    esac
    
    return 0
}

# Main function
main() {
    case "$1" in
        process)
            process_target "$2"
            ;;
        
        import)
            import_neo4j "$2"
            ;;
        
        export)
            export_data "$2" "$3"
            ;;
        
        help|--help|-h)
            usage
            ;;
        
        *)
            usage
            exit 1
            ;;
    esac
}

# Run main with all arguments
main "$@"