#!/bin/bash

# Network Interface Control Script
# This script allows sending OSINT tool traffic through different network interfaces
# including from a connected mobile phone

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if running as root
if [ "$EUID" -ne 0 ]; then
  echo -e "${RED}Please run as root${NC}"
  exit 1
fi

# Function to list available network interfaces
list_interfaces() {
  echo -e "${BLUE}Available network interfaces:${NC}"
  echo -e "${YELLOW}------------------------------${NC}"
  
  # Get list of interfaces
  interfaces=$(ip -o link show | awk -F': ' '{print $2}' | grep -v "lo")
  
  # Print interface details
  for iface in $interfaces; do
    # Get IP address
    ip_addr=$(ip -o -4 addr show dev $iface | awk '{print $4}' | cut -d/ -f1)
    if [ -z "$ip_addr" ]; then
      ip_addr="No IPv4 address"
    fi
    
    # Get interface status
    state=$(cat /sys/class/net/$iface/operstate 2>/dev/null || echo "unknown")
    
    # Get MAC address
    mac=$(cat /sys/class/net/$iface/address 2>/dev/null || echo "unknown")
    
    # Check if it's the default route
    is_default=$(ip route | grep "default" | grep $iface)
    if [ -n "$is_default" ]; then
      default_mark="${GREEN}*DEFAULT*${NC}"
    else
      default_mark=""
    fi
    
    # Check if USB device (potentially a phone)
    if [[ $iface == usb* ]] || [[ $iface == enp0s*u* ]]; then
      device_type="${BLUE}[USB/Mobile]${NC}"
    elif [[ $iface == wl* ]]; then
      device_type="${BLUE}[Wireless]${NC}"
    elif [[ $iface == tun* ]] || [[ $iface == wg* ]]; then
      device_type="${BLUE}[VPN]${NC}"
    else
      device_type="${BLUE}[Wired]${NC}"
    fi
    
    # Print info
    echo -e "${GREEN}$iface${NC} $device_type $default_mark"
    echo -e "  IP address: ${YELLOW}$ip_addr${NC}"
    echo -e "  MAC: ${YELLOW}$mac${NC}"
    echo -e "  State: ${YELLOW}$state${NC}"
    
    # If USB device, try to get more info about the connected phone
    if [[ $iface == usb* ]] || [[ $iface == enp0s*u* ]]; then
      if [ -x "$(command -v lsusb)" ]; then
        # Extract bus and device ID from the interface name or sys path
        for usb_dev in $(find /sys/class/net/$iface -maxdepth 3 -name "idVendor" | xargs dirname); do
          vendor=$(cat $usb_dev/idVendor 2>/dev/null)
          product=$(cat $usb_dev/idProduct 2>/dev/null)
          if [ -n "$vendor" ] && [ -n "$product" ]; then
            device_info=$(lsusb -d $vendor:$product 2>/dev/null | cut -d' ' -f7- || echo "Unknown USB device")
            echo -e "  Device: ${YELLOW}$device_info${NC}"
          fi
        done
      fi
    fi
    
    echo ""
  done
  
  # Show current routing
  current_routing
}

# Function to display current routing information
current_routing() {
  echo -e "${BLUE}Current default route:${NC}"
  echo -e "${YELLOW}------------------------------${NC}"
  ip route | grep default
  echo ""
  
  echo -e "${BLUE}Current OSINT tool routing:${NC}"
  echo -e "${YELLOW}------------------------------${NC}"
  if [ -f /etc/iproute2/rt_tables.d/osint.conf ]; then
    echo -e "${GREEN}OSINT traffic is routed through custom table${NC}"
    custom_iface=$(ip rule show | grep "osint" | awk -F"lookup" '{print $2}' | xargs)
    if [ -n "$custom_iface" ]; then
      route_info=$(ip route show table $custom_iface)
      echo -e "Table: $custom_iface"
      echo -e "Routes: $route_info"
    fi
  else
    echo -e "${YELLOW}OSINT traffic follows default routing${NC}"
  fi
  
  # Show iptables rules if any
  if iptables -t nat -L | grep -q "OSINT"; then
    echo -e "\n${BLUE}OSINT iptables rules:${NC}"
    echo -e "${YELLOW}------------------------------${NC}"
    iptables -t nat -L -v | grep "OSINT"
  fi
}

# Function to check if an interface exists
check_interface() {
  if [ ! -d "/sys/class/net/$1" ]; then
    echo -e "${RED}Error: Interface $1 does not exist${NC}"
    return 1
  fi
  return 0
}

# Function to check if interface has IPv4 address
check_interface_ip() {
  ip_addr=$(ip -o -4 addr show dev $1 2>/dev/null | awk '{print $4}' | cut -d/ -f1)
  if [ -z "$ip_addr" ]; then
    echo -e "${RED}Error: Interface $1 has no IPv4 address${NC}"
    return 1
  fi
  return 0
}

# Function to set up routing for a specific interface
setup_routing() {
  iface=$1
  user=$2
  
  # Check if interface exists
  check_interface $iface || return 1
  
  # Check if interface has IP
  check_interface_ip $iface || return 1
  
  # Get interface details
  ip_addr=$(ip -o -4 addr show dev $iface | awk '{print $4}' | cut -d/ -f1)
  gateway=$(ip route | grep $iface | grep default | awk '{print $3}')
  
  # If no gateway is found, try to determine it
  if [ -z "$gateway" ]; then
    # Try to find the network address
    network=$(ip route | grep $iface | grep -v default | head -1 | awk '{print $1}')
    if [ -n "$network" ]; then
      # Use the first hop in the network as gateway
      gateway=$(echo $network | cut -d/ -f1 | sed 's/[0-9]*$/1/')
      echo -e "${YELLOW}Warning: No default gateway found for $iface. Using $gateway${NC}"
    else
      echo -e "${RED}Error: Cannot determine gateway for $iface${NC}"
      return 1
    fi
  fi
  
  echo -e "${BLUE}Setting up OSINT routing through $iface ($ip_addr)...${NC}"
  
  # Create osint routing table if it doesn't exist
  if ! grep -q "osint" /etc/iproute2/rt_tables && ! grep -q "osint" /etc/iproute2/rt_tables.d/osint.conf 2>/dev/null; then
    mkdir -p /etc/iproute2/rt_tables.d
    echo "200 osint" > /etc/iproute2/rt_tables.d/osint.conf
    echo -e "${GREEN}Created OSINT routing table${NC}"
  fi
  
  # Flush existing rules and routes
  ip rule del fwmark 1 lookup osint 2>/dev/null
  ip route flush table osint 2>/dev/null
  iptables -t nat -D OUTPUT -m owner --uid-owner $user -j OSINT 2>/dev/null
  iptables -t nat -F OSINT 2>/dev/null
  iptables -t nat -X OSINT 2>/dev/null
  
  # Create new routing table and rules
  ip route add default via $gateway dev $iface table osint
  ip rule add fwmark 1 lookup osint
  
  # Set up iptables to mark packets from the specified user
  iptables -t nat -N OSINT
  iptables -t nat -A OUTPUT -m owner --uid-owner $user -j OSINT
  iptables -t mangle -A OSINT -j MARK --set-mark 1
  
  echo -e "${GREEN}Routing successfully configured!${NC}"
  echo -e "${GREEN}All traffic from user '$user' will now go through $iface${NC}"
  
  # Display the current routing
  current_routing
}

# Function to reset routing to default
reset_routing() {
  echo -e "${BLUE}Resetting OSINT routing to default...${NC}"
  
  # Flush rules and routes
  ip rule del fwmark 1 lookup osint 2>/dev/null
  ip route flush table osint 2>/dev/null
  
  # Remove iptables rules
  iptables -t nat -D OUTPUT -m owner --uid-owner osint 2>/dev/null
  iptables -t nat -F OSINT 2>/dev/null
  iptables -t nat -X OSINT 2>/dev/null
  
  echo -e "${GREEN}Routing reset to default${NC}"
  
  # Display the current routing
  current_routing
}

# Function to setup USB tethering with Android phone
setup_usb_tethering() {
  echo -e "${BLUE}Setting up USB tethering with Android phone...${NC}"
  
  # Check if the phone is connected
  if ! lsusb | grep -qE "Android|Google|Samsung|Xiaomi|Huawei|OnePlus|LG|Sony|HTC"; then
    echo -e "${RED}No Android phone detected via USB.${NC}"
    echo -e "${YELLOW}Please connect your phone via USB and enable USB tethering in your phone's settings.${NC}"
    return 1
  fi
  
  echo -e "${YELLOW}Looking for USB network interfaces...${NC}"
  
  # Find USB network interfaces
  usb_ifaces=$(ip -o link show | awk -F': ' '{print $2}' | grep -E "usb|enp0s.*u")
  
  if [ -z "$usb_ifaces" ]; then
    echo -e "${RED}No USB network interfaces found.${NC}"
    echo -e "${YELLOW}Make sure USB tethering is enabled on your phone.${NC}"
    return 1
  fi
  
  echo -e "${GREEN}Found USB network interfaces: $usb_ifaces${NC}"
  
  # Check for multiple interfaces
  usb_iface_count=$(echo $usb_ifaces | wc -w)
  if [ $usb_iface_count -gt 1 ]; then
    echo -e "${YELLOW}Multiple USB interfaces found. Please select one:${NC}"
    select iface in $usb_ifaces; do
      if [ -n "$iface" ]; then
        usb_iface=$iface
        break
      fi
    done
  else
    usb_iface=$usb_ifaces
  fi
  
  echo -e "${GREEN}Selected interface: $usb_iface${NC}"
  
  # Make sure the interface is up
  ip link set $usb_iface up
  
  # Try to get IP via DHCP if not already assigned
  if ! ip -o -4 addr show dev $usb_iface | grep -q "inet"; then
    echo -e "${YELLOW}Requesting IP address via DHCP...${NC}"
    dhclient -v $usb_iface
  fi
  
  # Check if IP was assigned
  if ! ip -o -4 addr show dev $usb_iface | grep -q "inet"; then
    echo -e "${RED}Failed to get IP address for $usb_iface${NC}"
    echo -e "${YELLOW}Please check your phone's USB tethering settings.${NC}"
    return 1
  fi
  
  # Display interface details
  ip_addr=$(ip -o -4 addr show dev $usb_iface | awk '{print $4}' | cut -d/ -f1)
  echo -e "${GREEN}Successfully connected to phone via USB tethering${NC}"
  echo -e "${GREEN}Interface: $usb_iface, IP: $ip_addr${NC}"
  
  # Set up routing (optional, prompt user)
  echo -e "${YELLOW}Do you want to route OSINT traffic through this interface? (y/n)${NC}"
  read -r choice
  if [[ $choice =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}Enter username to route traffic for:${NC}"
    read -r username
    setup_routing $usb_iface $username
  fi
  
  return 0
}

# Function to show help
show_help() {
  echo -e "${GREEN}Network Interface Control for OSINT Tools${NC}"
  echo -e "${YELLOW}---------------------------------------${NC}"
  echo -e "This script allows you to control which network interface your OSINT tools use."
  echo -e "It can route traffic from specific users through any interface, including a tethered phone."
  echo -e ""
  echo -e "${BLUE}Usage:${NC}"
  echo -e "  ${YELLOW}list${NC}             - List all available network interfaces"
  echo -e "  ${YELLOW}status${NC}           - Show current routing status"
  echo -e "  ${YELLOW}use${NC} IFACE USER   - Route OSINT traffic from USER through IFACE"
  echo -e "  ${YELLOW}reset${NC}            - Reset routing to system default"
  echo -e "  ${YELLOW}phone${NC}            - Set up USB tethering with Android phone"
  echo -e "  ${YELLOW}help${NC}             - Show this help"
  echo -e ""
  echo -e "${BLUE}Examples:${NC}"
  echo -e "  ${YELLOW}$0 list${NC}"
  echo -e "  ${YELLOW}$0 use wlan0 osint${NC}     - Route 'osint' user traffic through WiFi"
  echo -e "  ${YELLOW}$0 use usb0 campo${NC}      - Route 'campo' user traffic through USB tethered phone"
  echo -e "  ${YELLOW}$0 phone${NC}               - Set up USB tethering with phone"
  echo -e ""
}

# Main script logic
case "$1" in
  list)
    list_interfaces
    ;;
    
  status)
    current_routing
    ;;
    
  use)
    if [ -z "$2" ] || [ -z "$3" ]; then
      echo -e "${RED}Error: Missing arguments${NC}"
      echo -e "${YELLOW}Usage: $0 use INTERFACE USERNAME${NC}"
      exit 1
    fi
    setup_routing $2 $3
    ;;
    
  reset)
    reset_routing
    ;;
    
  phone)
    setup_usb_tethering
    ;;
    
  help|--help|-h)
    show_help
    ;;
    
  *)
    show_help
    exit 1
    ;;
esac

exit 0