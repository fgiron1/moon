#!/bin/bash

# ui/terminal/modules/pentesting.sh
# Active penetration testing module for OSINT Command Center Terminal Interface

# Load helper functions
source "$SCRIPT_DIR/helpers/helpers.sh"

# Define directories
PENTEST_DATA_DIR="${DATA_DIR}/pentesting"

# Container name for penetration testing tools
PENTEST_CONTAINER="pentesting"

# =====================================
# SQL Injection Testing
# =====================================

sql_injection_test() {
  local target=""
  
  # Get target URL
  read_input "Enter target URL with parameters (e.g., http://site.com/page?id=1): " target
  
  # Validate URL
  if ! [[ "$target" =~ ^https?:// ]]; then
    status_message error "Invalid URL format"
    sleep 2
    return
  fi
  
  # Create target directory
  local target_safe=$(echo "$target" | sed 's/[^a-zA-Z0-9]/_/g')
  local target_dir="$PENTEST_DATA_DIR/sqli/$target_safe"
  sudo mkdir -p "$target_dir"
  
  section_header "SQL Injection Testing: $target"
  
  # Ensure pentesting container is running
  echo -e "${YELLOW}Starting penetration testing container...${NC}"
  sudo $CONTAINER_MANAGER start $PENTEST_CONTAINER
  
  # Ask for scan type
  echo -e "1. Quick scan (basic tests)"
  echo -e "2. Deep scan (comprehensive)"
  echo -e "3. Aggressive scan (all tests, loud)"
  read_input "Select scan type: " scan_type validate_number
  
  local sqlmap_opts=""
  case $scan_type in
    1) sqlmap_opts="--batch --smart" ;;
    2) sqlmap_opts="--batch --level=3 --risk=2" ;;
    3) sqlmap_opts="--batch --level=5 --risk=3 --tamper=space2comment" ;;
    *) 
      status_message error "Invalid selection"
      sleep 2
      return
      ;;
  esac
  
  # Run SQLMap
  echo -e "${YELLOW}Running SQL injection tests...${NC}"
  cmd="sqlmap -u '$target' $sqlmap_opts --output-dir=$PENTEST_DATA_DIR/sqli/$target_safe"
  sudo $CONTAINER_MANAGER exec $PENTEST_CONTAINER $cmd &
  show_spinner $! "Testing for SQL injection vulnerabilities..."
  
  # Display results
  if sudo test -f "$target_dir/log"; then
    echo
    status_message success "SQL injection test completed"
    echo
    
    # Check if vulnerable
    if sudo grep -q "vulnerable" "$target_dir/log"; then
      status_message error "SQL INJECTION VULNERABILITY FOUND!"
      echo
      echo -e "${BLUE}Vulnerable parameters:${NC}"
      sudo grep "Parameter:" "$target_dir/log" | grep "vulnerable"
      echo
      echo -e "${BLUE}Database information:${NC}"
      sudo grep -E "back-end DBMS:|current database:" "$target_dir/log"
    else
      status_message success "No SQL injection vulnerabilities found"
    fi
  else
    status_message error "SQL injection test failed"
  fi
  
  echo
  read -p "Press Enter to continue..." dummy
}

# =====================================
# Service Brute Force
# =====================================

service_bruteforce() {
  local target=""
  local service=""
  
  section_header "Service Brute Force"
  
  # Get target
  read_input "Enter target IP or hostname: " target
  
  # Select service
  echo -e "${BLUE}Select service:${NC}"
  echo -e "1. SSH (22)"
  echo -e "2. FTP (21)"
  echo -e "3. SMB (445)"
  echo -e "4. RDP (3389)"
  echo -e "5. MySQL (3306)"
  echo -e "6. PostgreSQL (5432)"
  echo -e "7. VNC (5900)"
  echo -e "8. HTTP Basic Auth"
  read_input "Select service: " service_choice validate_number
  
  # Map service choice
  case $service_choice in
    1) service="ssh"; port="22" ;;
    2) service="ftp"; port="21" ;;
    3) service="smb"; port="445" ;;
    4) service="rdp"; port="3389" ;;
    5) service="mysql"; port="3306" ;;
    6) service="postgresql"; port="5432" ;;
    7) service="vnc"; port="5900" ;;
    8) 
      service="http-get"
      read_input "Enter full URL: " target
      ;;
    *)
      status_message error "Invalid selection"
      sleep 2
      return
      ;;
  esac
  
  # Get credentials
  echo -e "${BLUE}Credential options:${NC}"
  echo -e "1. Single username/password"
  echo -e "2. Username list with single password"
  echo -e "3. Single username with password list"
  echo -e "4. Username and password lists"
  read_input "Select option: " cred_option validate_number
  
  # Set up hydra command based on selection
  local hydra_cmd="hydra"
  
  case $cred_option in
    1)
      read_input "Enter username: " username
      read_secure_input "Enter password: " password
      hydra_cmd="$hydra_cmd -l $username -p $password"
      ;;
    2)
      read_input "Enter path to username list: " userlist validate_file_exists
      read_secure_input "Enter password: " password
      hydra_cmd="$hydra_cmd -L $userlist -p $password"
      ;;
    3)
      read_input "Enter username: " username
      read_input "Enter path to password list: " passlist validate_file_exists
      hydra_cmd="$hydra_cmd -l $username -P $passlist"
      ;;
    4)
      read_input "Enter path to username list: " userlist validate_file_exists
      read_input "Enter path to password list: " passlist validate_file_exists
      hydra_cmd="$hydra_cmd -L $userlist -P $passlist"
      ;;
    *)
      status_message error "Invalid selection"
      sleep 2
      return
      ;;
  esac
  
  # Create output directory
  local target_safe=$(echo "$target" | sed 's/[^a-zA-Z0-9]/_/g')
  local output_dir="$PENTEST_DATA_DIR/bruteforce/${target_safe}_${service}"
  sudo mkdir -p "$output_dir"
  
  # Ensure pentesting container is running
  echo -e "${YELLOW}Starting penetration testing container...${NC}"
  sudo $CONTAINER_MANAGER start $PENTEST_CONTAINER
  
  # Run hydra
  echo -e "${YELLOW}Running brute force attack on $service...${NC}"
  
  if [[ "$service" == "http-get" ]]; then
    cmd="$hydra_cmd -f -o $output_dir/results.txt $target http-get"
  else
    cmd="$hydra_cmd -f -o $output_dir/results.txt $target $service"
  fi
  
  sudo $CONTAINER_MANAGER exec $PENTEST_CONTAINER $cmd &
  show_spinner $! "Attempting authentication..."
  
  # Display results
  if sudo test -f "$output_dir/results.txt"; then
    echo
    status_message success "Brute force completed"
    echo
    
    # Check for successful logins
    if sudo grep -q "login:" "$output_dir/results.txt"; then
      status_message error "VALID CREDENTIALS FOUND!"
      echo
      echo -e "${BLUE}Valid credentials:${NC}"
      sudo grep "login:" "$output_dir/results.txt"
    else
      status_message info "No valid credentials found"
    fi
  else
    status_message error "Brute force failed"
  fi
  
  echo
  read -p "Press Enter to continue..." dummy
}

# =====================================
# SMB Enumeration
# =====================================

smb_enumeration() {
  local target=""
  
  # Get target
  read_input "Enter target IP or hostname: " target
  
  section_header "SMB Enumeration: $target"
  
  # Create output directory
  local target_safe=$(echo "$target" | sed 's/[^a-zA-Z0-9]/_/g')
  local output_dir="$PENTEST_DATA_DIR/smb/$target_safe"
  sudo mkdir -p "$output_dir"
  
  # Ensure pentesting container is running
  echo -e "${YELLOW}Starting penetration testing container...${NC}"
  sudo $CONTAINER_MANAGER start $PENTEST_CONTAINER
  
  # Run enum4linux-ng
  echo -e "${YELLOW}Running comprehensive SMB enumeration...${NC}"
  cmd="python3 /opt/osint/tools/enum4linux-ng/enum4linux-ng.py -A -oJ $output_dir/enum4linux.json $target"
  sudo $CONTAINER_MANAGER exec $PENTEST_CONTAINER $cmd &
  show_spinner $! "Enumerating SMB services..."
  
  # Run CrackMapExec for additional info
  echo -e "${YELLOW}Running CrackMapExec for additional enumeration...${NC}"
  cmd="crackmapexec smb $target --shares --users --groups --local-auth > $output_dir/cme_results.txt"
  sudo $CONTAINER_MANAGER exec $PENTEST_CONTAINER $cmd &
  show_spinner $! "Gathering additional SMB information..."
  
  # Display results
  echo
  status_message success "SMB enumeration completed"
  echo
  
  # Parse and display key findings
  if sudo test -f "$output_dir/enum4linux.json"; then
    echo -e "${BLUE}SMB Information:${NC}"
    
    # Use jq to parse if available
    if command -v jq >/dev/null 2>&1; then
      # OS Information
      os_info=$(sudo jq -r '.os_info.os // "Unknown"' "$output_dir/enum4linux.json" 2>/dev/null)
      echo -e "${YELLOW}Operating System:${NC} $os_info"
      
      # Domain/Workgroup
      domain=$(sudo jq -r '.domain // "Unknown"' "$output_dir/enum4linux.json" 2>/dev/null)
      echo -e "${YELLOW}Domain/Workgroup:${NC} $domain"
      
      # Shares
      echo -e "\n${YELLOW}Shares:${NC}"
      sudo jq -r '.shares[]? | .name + " - " + .comment' "$output_dir/enum4linux.json" 2>/dev/null || echo "No shares found"
      
      # Users
      echo -e "\n${YELLOW}Users:${NC}"
      sudo jq -r '.users[]? | .username' "$output_dir/enum4linux.json" 2>/dev/null | head -10 || echo "No users enumerated"
    else
      # Fallback to text parsing
      echo -e "${YELLOW}Raw results saved to: $output_dir${NC}"
    fi
  fi
  
  # Display CrackMapExec results
  if sudo test -f "$output_dir/cme_results.txt"; then
    echo -e "\n${BLUE}CrackMapExec Results:${NC}"
    sudo cat "$output_dir/cme_results.txt" | head -20
  fi
  
  echo
  read -p "Press Enter to continue..." dummy
}

# =====================================
# SSL/TLS Analysis
# =====================================

ssl_analysis() {
  local target=""
  
  # Get target
  read_input "Enter target hostname or IP: " target
  
  # Get port
  read_input "Enter port (default 443): " port
  port=${port:-443}
  
  section_header "SSL/TLS Analysis: $target:$port"
  
  # Create output directory
  local target_safe=$(echo "$target" | sed 's/[^a-zA-Z0-9]/_/g')
  local output_dir="$PENTEST_DATA_DIR/ssl/${target_safe}_${port}"
  sudo mkdir -p "$output_dir"
  
  # Ensure pentesting container is running
  echo -e "${YELLOW}Starting penetration testing container...${NC}"
  sudo $CONTAINER_MANAGER start $PENTEST_CONTAINER
  
  # Run testssl.sh
  echo -e "${YELLOW}Running comprehensive SSL/TLS analysis...${NC}"
  cmd="testssl --jsonfile $output_dir/testssl.json --htmlfile $output_dir/testssl.html $target:$port"
  sudo $CONTAINER_MANAGER exec $PENTEST_CONTAINER $cmd &
  show_spinner $! "Analyzing SSL/TLS configuration..."
  
  # Display results
  if sudo test -f "$output_dir/testssl.json"; then
    echo
    status_message success "SSL/TLS analysis completed"
    echo
    
    # Parse key findings
    echo -e "${BLUE}SSL/TLS Analysis Results:${NC}"
    
    # Check for vulnerabilities
    if sudo grep -q '"severity":"HIGH"' "$output_dir/testssl.json"; then
      status_message error "HIGH severity issues found!"
      echo -e "${RED}Critical vulnerabilities detected${NC}"
    fi
    
    # Display summary from JSON
    if command -v jq >/dev/null 2>&1; then
      # Protocol versions
      echo -e "\n${YELLOW}Supported Protocols:${NC}"
      sudo jq -r '.scanResult[]? | select(.id=="protocols") | .finding' "$output_dir/testssl.json" 2>/dev/null
      
      # Vulnerabilities
      echo -e "\n${YELLOW}Vulnerabilities:${NC}"
      sudo jq -r '.scanResult[]? | select(.severity=="HIGH" or .severity=="CRITICAL") | .id + ": " + .finding' "$output_dir/testssl.json" 2>/dev/null
      
      # Certificate info
      echo -e "\n${YELLOW}Certificate Information:${NC}"
      sudo jq -r '.scanResult[]? | select(.id | contains("cert")) | .id + ": " + .finding' "$output_dir/testssl.json" 2>/dev/null | head -5
    fi
    
    echo -e "\n${YELLOW}Full report saved to: $output_dir/testssl.html${NC}"
  else
    status_message error "SSL/TLS analysis failed"
  fi
  
  echo
  read -p "Press Enter to continue..." dummy
}

# =====================================
# Pentesting Menu
# =====================================

pentesting_menu() {
  show_header
  echo -e "${BLUE}[⚔️] PENETRATION TESTING${NC}"
  echo -e "1. SQL Injection Testing"
  echo -e "2. Service Brute Force"
  echo -e "3. SMB Enumeration"
  echo -e "4. SSL/TLS Analysis"
  echo -e "5. Parameter Discovery"
  echo -e "6. JWT Token Analysis"
  echo -e "9. Back to Main Menu"
  echo -e "0. Exit"
  echo
  
  read_input "Select option: " option validate_number
  
  case $option in
    1) sql_injection_test ;;
    2) service_bruteforce ;;
    3) smb_enumeration ;;
    4) ssl_analysis ;;
    5) parameter_discovery ;;
    6) jwt_analysis ;;
    9) return 0 ;;
    0) exit 0 ;;
    *) 
      status_message error "Invalid option"
      sleep 1
      ;;
  esac
  
  # Return to pentesting menu after function completes
  pentesting_menu
  return 0
}